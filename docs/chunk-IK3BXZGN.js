import{a as me}from"./improved-funicular/chunk-5HU5D6U5.js";import{a as fe}from"./improved-funicular/chunk-3CMYX2ZD.js";import{a as ue}from"./improved-funicular/chunk-XBPNKSSF.js";import"./improved-funicular/chunk-JNYDW3W7.js";import"./improved-funicular/chunk-2CHCPHKJ.js";import"./improved-funicular/chunk-AJ2E64XZ.js";import"./improved-funicular/chunk-RA745D6X.js";import"./improved-funicular/chunk-T6SZG7J7.js";import{a as pe}from"./improved-funicular/chunk-XQX2UT4T.js";import{a as he}from"./improved-funicular/chunk-PJJ6KJUE.js";import{c as ce,d as C}from"./improved-funicular/chunk-KNB5IV62.js";import{l as Y}from"./improved-funicular/chunk-U2BKPXLL.js";import"./improved-funicular/chunk-5WEKHKPQ.js";import{D as X,P as ee,T as te,U as ae,V as le,W as se,X as re,Y as ne,Z as oe,h as p,j as I,ja as M,la as T,ma as ie,na as de,oa as B,v as Z}from"./improved-funicular/chunk-KEUU4GSS.js";import"./improved-funicular/chunk-4VU2EVZ6.js";import"./improved-funicular/chunk-Z5AVOVTC.js";import"./improved-funicular/chunk-XOODDCVZ.js";import"./improved-funicular/chunk-O3APSYOQ.js";import"./improved-funicular/chunk-337ES2G7.js";import"./improved-funicular/chunk-OWRAVFPR.js";import{a as G,g as Q}from"./improved-funicular/chunk-7IQ7MVDA.js";var Le={nodes:[],levels:new Map,outerNodes:[],classes:new Map},w=new fe(()=>structuredClone(Le)),$e=p(()=>{let r=Z,a=X();return Y(G(G({},r.treemap),a.treemap??{}))},"getConfig"),Te=p(()=>w.records.nodes,"getNodes"),Fe=p((r,a)=>{let c=w.records;c.nodes.push(r),c.levels.set(r,a),a===0&&c.outerNodes.push(r),a===0&&!c.root&&(c.root=r)},"addNode"),Ne=p(()=>({name:"",children:w.records.outerNodes}),"getRoot"),ze=p((r,a)=>{let c=w.records.classes,o=c.get(r)??{id:r,styles:[],textStyles:[]};c.set(r,o);let i=a.replace(/\\,/g,"\xA7\xA7\xA7").replace(/,/g,";").replace(/§§§/g,",").split(";");i&&i.forEach(s=>{ce(s)&&(o?.textStyles?o.textStyles.push(s):o.textStyles=[s]),o?.styles?o.styles.push(s):o.styles=[s]}),c.set(r,o)},"addClass"),ke=p(()=>w.records.classes,"getClasses"),Pe=p(r=>w.records.classes.get(r)?.styles??[],"getStylesForClass"),Ae=p(()=>{te(),w.reset()},"clear"),E={getNodes:Te,addNode:Fe,getRoot:Ne,getConfig:$e,clear:Ae,setAccTitle:ae,getAccTitle:le,setDiagramTitle:ne,getDiagramTitle:oe,getAccDescription:re,setAccDescription:se,addClass:ze,getClasses:ke,getStylesForClass:Pe};function ge(r){if(!r.length)return[];let a=[],c=[];return r.forEach(o=>{let i={name:o.name,children:o.type==="Leaf"?void 0:[]};for(i.classSelector=o?.classSelector,o?.cssCompiledStyles&&(i.cssCompiledStyles=[o.cssCompiledStyles]),o.type==="Leaf"&&o.value!==void 0&&(i.value=o.value);c.length>0&&c[c.length-1].level>=o.level;)c.pop();if(c.length===0)a.push(i);else{let s=c[c.length-1].node;s.children?s.children.push(i):s.children=[i]}o.type!=="Leaf"&&c.push({node:i,level:o.level})}),a}p(ge,"buildHierarchy");var Ve=p(r=>{me(r,E);let a=[];for(let i of r.TreemapRows??[])i.$type==="ClassDefStatement"&&E.addClass(i.className??"",i.styleText??"");for(let i of r.TreemapRows??[]){let s=i.item;if(!s)continue;let S=i.indent?parseInt(i.indent):0,N=We(s),z=s.classSelector?E.getStylesForClass(s.classSelector):[],l=z.length>0?z.join(";"):void 0,k={level:S,name:N,type:s.$type,value:s.value,classSelector:s.classSelector,cssCompiledStyles:l};a.push(k)}let c=ge(a),o=p((i,s)=>{for(let S of i)E.addNode(S,s),S.children&&S.children.length>0&&o(S.children,s+1)},"addNodesRecursively");o(c,0)},"populate"),We=p(r=>r.name?String(r.name):"","getItemName"),Me={parse:p(r=>Q(null,null,function*(){try{let c=yield ue("treemap",r);I.debug("Treemap AST:",c),Ve(c)}catch(a){throw I.error("Error parsing treemap:",a),a}}),"parse")},De=10,F=10,D=25,Ee=p((r,a,c,o)=>{let i=o.db,s=i.getConfig(),S=s.padding??De,N=i.getDiagramTitle(),z=i.getRoot(),{themeVariables:l}=X();if(!z)return;let k=N?30:0,P=pe(a),j=s.nodeWidth?s.nodeWidth*F:960,U=s.nodeHeight?s.nodeHeight*F:500,O=j,q=U+k;P.attr("viewBox",`0 0 ${O} ${q}`),ee(P,q,O,s.useMaxWidth);let b;try{let e=s.valueFormat||",";if(e==="$0,0")b=p(t=>"$"+T(",")(t),"valueFormat");else if(e.startsWith("$")&&e.includes(",")){let t=/\.\d+/.exec(e),n=t?t[0]:"";b=p(h=>"$"+T(","+n)(h),"valueFormat")}else if(e.startsWith("$")){let t=e.substring(1);b=p(n=>"$"+T(t||"")(n),"valueFormat")}else b=T(e)}catch(e){I.error("Error creating format function:",e),b=T(",")}let A=B().range(["transparent",l.cScale0,l.cScale1,l.cScale2,l.cScale3,l.cScale4,l.cScale5,l.cScale6,l.cScale7,l.cScale8,l.cScale9,l.cScale10,l.cScale11]),ye=B().range(["transparent",l.cScalePeer0,l.cScalePeer1,l.cScalePeer2,l.cScalePeer3,l.cScalePeer4,l.cScalePeer5,l.cScalePeer6,l.cScalePeer7,l.cScalePeer8,l.cScalePeer9,l.cScalePeer10,l.cScalePeer11]),_=B().range([l.cScaleLabel0,l.cScaleLabel1,l.cScaleLabel2,l.cScaleLabel3,l.cScaleLabel4,l.cScaleLabel5,l.cScaleLabel6,l.cScaleLabel7,l.cScaleLabel8,l.cScaleLabel9,l.cScaleLabel10,l.cScaleLabel11]);N&&P.append("text").attr("x",O/2).attr("y",k/2).attr("class","treemapTitle").attr("text-anchor","middle").attr("dominant-baseline","middle").text(N);let J=P.append("g").attr("transform",`translate(0, ${k})`).attr("class","treemapContainer"),Se=ie(z).sum(e=>e.value??0).sort((e,t)=>(t.value??0)-(e.value??0)),K=de().size([j,U]).paddingTop(e=>e.children&&e.children.length>0?D+F:0).paddingInner(S).paddingLeft(e=>e.children&&e.children.length>0?F:0).paddingRight(e=>e.children&&e.children.length>0?F:0).paddingBottom(e=>e.children&&e.children.length>0?F:0).round(!0)(Se),xe=K.descendants().filter(e=>e.children&&e.children.length>0),V=J.selectAll(".treemapSection").data(xe).enter().append("g").attr("class","treemapSection").attr("transform",e=>`translate(${e.x0},${e.y0})`);V.append("rect").attr("width",e=>e.x1-e.x0).attr("height",D).attr("class","treemapSectionHeader").attr("fill","none").attr("fill-opacity",.6).attr("stroke-width",.6).attr("style",e=>e.depth===0?"display: none;":""),V.append("clipPath").attr("id",(e,t)=>`clip-section-${a}-${t}`).append("rect").attr("width",e=>Math.max(0,e.x1-e.x0-12)).attr("height",D),V.append("rect").attr("width",e=>e.x1-e.x0).attr("height",e=>e.y1-e.y0).attr("class",(e,t)=>`treemapSection section${t}`).attr("fill",e=>A(e.data.name)).attr("fill-opacity",.6).attr("stroke",e=>ye(e.data.name)).attr("stroke-width",2).attr("stroke-opacity",.4).attr("style",e=>{if(e.depth===0)return"display: none;";let t=C({cssCompiledStyles:e.data.cssCompiledStyles});return t.nodeStyles+";"+t.borderStyles.join(";")}),V.append("text").attr("class","treemapSectionLabel").attr("x",6).attr("y",D/2).attr("dominant-baseline","middle").text(e=>e.depth===0?"":e.data.name).attr("font-weight","bold").attr("style",e=>{if(e.depth===0)return"display: none;";let t="dominant-baseline: middle; font-size: 12px; fill:"+_(e.data.name)+"; white-space: nowrap; overflow: hidden; text-overflow: ellipsis;",n=C({cssCompiledStyles:e.data.cssCompiledStyles});return t+n.labelStyles.replace("color:","fill:")}).each(function(e){if(e.depth===0)return;let t=M(this),n=e.data.name;t.text(n);let h=e.x1-e.x0,g=6,y;s.showValues!==!1&&e.value?y=h-10-30-10-g:y=h-g-6;let f=Math.max(15,y),d=t.node();if(d.getComputedTextLength()>f){let m="...",u=n;for(;u.length>0;){if(u=n.substring(0,u.length-1),u.length===0){t.text(m),d.getComputedTextLength()>f&&t.text("");break}if(t.text(u+m),d.getComputedTextLength()<=f)break}}}),s.showValues!==!1&&V.append("text").attr("class","treemapSectionValue").attr("x",e=>e.x1-e.x0-10).attr("y",D/2).attr("text-anchor","end").attr("dominant-baseline","middle").text(e=>e.value?b(e.value):"").attr("font-style","italic").attr("style",e=>{if(e.depth===0)return"display: none;";let t="text-anchor: end; dominant-baseline: middle; font-size: 10px; fill:"+_(e.data.name)+"; white-space: nowrap; overflow: hidden; text-overflow: ellipsis;",n=C({cssCompiledStyles:e.data.cssCompiledStyles});return t+n.labelStyles.replace("color:","fill:")});let be=K.leaves(),R=J.selectAll(".treemapLeafGroup").data(be).enter().append("g").attr("class",(e,t)=>`treemapNode treemapLeafGroup leaf${t}${e.data.classSelector?` ${e.data.classSelector}`:""}x`).attr("transform",e=>`translate(${e.x0},${e.y0})`);R.append("rect").attr("width",e=>e.x1-e.x0).attr("height",e=>e.y1-e.y0).attr("class","treemapLeaf").attr("fill",e=>e.parent?A(e.parent.data.name):A(e.data.name)).attr("style",e=>C({cssCompiledStyles:e.data.cssCompiledStyles}).nodeStyles).attr("fill-opacity",.3).attr("stroke",e=>e.parent?A(e.parent.data.name):A(e.data.name)).attr("stroke-width",3),R.append("clipPath").attr("id",(e,t)=>`clip-${a}-${t}`).append("rect").attr("width",e=>Math.max(0,e.x1-e.x0-4)).attr("height",e=>Math.max(0,e.y1-e.y0-4)),R.append("text").attr("class","treemapLabel").attr("x",e=>(e.x1-e.x0)/2).attr("y",e=>(e.y1-e.y0)/2).attr("style",e=>{let t="text-anchor: middle; dominant-baseline: middle; font-size: 38px;fill:"+_(e.data.name)+";",n=C({cssCompiledStyles:e.data.cssCompiledStyles});return t+n.labelStyles.replace("color:","fill:")}).attr("clip-path",(e,t)=>`url(#clip-${a}-${t})`).text(e=>e.data.name).each(function(e){let t=M(this),n=e.x1-e.x0,h=e.y1-e.y0,g=t.node(),y=4,L=n-2*y,f=h-2*y;if(L<10||f<10){t.style("display","none");return}let d=parseInt(t.style("font-size"),10),v=8,m=28,u=.6,x=6,W=2;for(;g.getComputedTextLength()>L&&d>v;)d--,t.style("font-size",`${d}px`);let $=Math.max(x,Math.min(m,Math.round(d*u))),H=d+W+$;for(;H>f&&d>v&&(d--,$=Math.max(x,Math.min(m,Math.round(d*u))),!($<x&&d===v));)t.style("font-size",`${d}px`),H=d+W+$,$<=x&&H>f;t.style("font-size",`${d}px`),(g.getComputedTextLength()>L||d<v||f<d)&&t.style("display","none")}),s.showValues!==!1&&R.append("text").attr("class","treemapValue").attr("x",t=>(t.x1-t.x0)/2).attr("y",function(t){return(t.y1-t.y0)/2}).attr("style",t=>{let n="text-anchor: middle; dominant-baseline: hanging; font-size: 28px;fill:"+_(t.data.name)+";",h=C({cssCompiledStyles:t.data.cssCompiledStyles});return n+h.labelStyles.replace("color:","fill:")}).attr("clip-path",(t,n)=>`url(#clip-${a}-${n})`).text(t=>t.value?b(t.value):"").each(function(t){let n=M(this),h=this.parentNode;if(!h){n.style("display","none");return}let g=M(h).select(".treemapLabel");if(g.empty()||g.style("display")==="none"){n.style("display","none");return}let y=parseFloat(g.style("font-size")),L=28,f=.6,d=6,v=2,m=Math.max(d,Math.min(L,Math.round(y*f)));n.style("font-size",`${m}px`);let x=(t.y1-t.y0)/2+y/2+v;n.attr("y",x);let W=t.x1-t.x0,Ce=t.y1-t.y0-4,we=W-2*4;n.node().getComputedTextLength()>we||x+m>Ce||m<d?n.style("display","none"):n.style("display",null)});let ve=s.diagramPadding??8;he(P,ve,"flowchart",s?.useMaxWidth||!1)},"draw"),_e=p(function(r,a){return a.db.getClasses()},"getClasses"),Re={draw:Ee,getClasses:_e},He={sectionStrokeColor:"black",sectionStrokeWidth:"1",sectionFillColor:"#efefef",leafStrokeColor:"black",leafStrokeWidth:"1",leafFillColor:"#efefef",labelColor:"black",labelFontSize:"12px",valueFontSize:"10px",valueColor:"black",titleColor:"black",titleFontSize:"14px"},Ie=p(({treemap:r}={})=>{let a=Y(He,r);return`
  .treemapNode.section {
    stroke: ${a.sectionStrokeColor};
    stroke-width: ${a.sectionStrokeWidth};
    fill: ${a.sectionFillColor};
  }
  .treemapNode.leaf {
    stroke: ${a.leafStrokeColor};
    stroke-width: ${a.leafStrokeWidth};
    fill: ${a.leafFillColor};
  }
  .treemapLabel {
    fill: ${a.labelColor};
    font-size: ${a.labelFontSize};
  }
  .treemapValue {
    fill: ${a.valueColor};
    font-size: ${a.valueFontSize};
  }
  .treemapTitle {
    fill: ${a.titleColor};
    font-size: ${a.titleFontSize};
  }
  `},"getStyles"),Be=Ie,et={parser:Me,db:E,renderer:Re,styles:Be};export{et as diagram};
